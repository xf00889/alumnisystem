# Generated by Django 5.0.2 on 2025-05-24 17:56

from django.db import migrations


def sync_career_paths_to_experience(apps, schema_editor):
    """
    Migrate data from CareerPath model to Experience model
    to ensure all professional information is consolidated
    """
    CareerPath = apps.get_model('alumni_directory', 'CareerPath')
    Experience = apps.get_model('accounts', 'Experience')
    Alumni = apps.get_model('alumni_directory', 'Alumni')
    Profile = apps.get_model('accounts', 'Profile')
    
    # Get all career paths
    career_paths = CareerPath.objects.all()
    
    # Map promotion_type to career_significance
    promotion_map = {
        'PROMOTION': 'PROMOTION',
        'LATERAL': 'LATERAL',
        'NEW_ROLE': 'NEW_ROLE',
        'COMPANY_CHANGE': 'COMPANY_CHANGE',
    }
    
    for career_path in career_paths:
        try:
            # Get the alumni and profile
            alumni = career_path.alumni
            profile = Profile.objects.get(user=alumni.user)
            
            # Check if this experience already exists to avoid duplication
            existing_exp = Experience.objects.filter(
                profile=profile,
                company=career_path.company,
                position=career_path.position,
                start_date=career_path.start_date,
                is_current=career_path.is_current
            ).first()
            
            if not existing_exp:
                # Create new experience from career path data
                Experience.objects.create(
                    profile=profile,
                    company=career_path.company,
                    position=career_path.position,
                    location=career_path.location or '',
                    start_date=career_path.start_date,
                    end_date=career_path.end_date,
                    is_current=career_path.is_current,
                    description=career_path.description,
                    achievements=career_path.achievements,
                    career_significance=promotion_map.get(career_path.promotion_type, 'REGULAR'),
                    salary_range=career_path.salary_range,
                    skills_gained=career_path.skills_gained
                )
                print(f"Created experience for {career_path.position} at {career_path.company}")
        except Exception as e:
            print(f"Error migrating career path {career_path.id}: {str(e)}")


def sync_current_positions(apps, schema_editor):
    """
    Ensure current positions are properly synced between 
    Profile, Experience, and Alumni models
    """
    Alumni = apps.get_model('alumni_directory', 'Alumni')
    Profile = apps.get_model('accounts', 'Profile')
    Experience = apps.get_model('accounts', 'Experience')
    
    # Get all profiles
    profiles = Profile.objects.all()
    
    for profile in profiles:
        try:
            # Get the current experience for this profile
            current_exp = Experience.objects.filter(profile=profile, is_current=True).first()
            
            # Get the alumni record if it exists
            try:
                alumni = Alumni.objects.get(user=profile.user)
                has_alumni = True
            except Alumni.DoesNotExist:
                has_alumni = False
            
            if current_exp:
                # Update profile with current experience data
                profile.current_position = current_exp.position
                profile.current_employer = current_exp.company
                profile.save(update_fields=['current_position', 'current_employer'])
                
                # Update alumni if it exists
                if has_alumni:
                    alumni.current_company = current_exp.company
                    alumni.job_title = current_exp.position
                    alumni.save(update_fields=['current_company', 'job_title'])
            
            elif profile.current_position and profile.current_employer:
                # If no current experience but profile has current position data,
                # create a new experience record
                import datetime
                Experience.objects.create(
                    profile=profile,
                    position=profile.current_position,
                    company=profile.current_employer,
                    location=profile.city or '',
                    start_date=datetime.date.today(),
                    is_current=True,
                    career_significance='REGULAR'
                )
                print(f"Created experience for {profile.current_position} at {profile.current_employer}")
            
            elif has_alumni and alumni.job_title and alumni.current_company:
                # If alumni has position data but profile doesn't,
                # update profile and create experience
                profile.current_position = alumni.job_title
                profile.current_employer = alumni.current_company
                profile.save(update_fields=['current_position', 'current_employer'])
                
                import datetime
                Experience.objects.create(
                    profile=profile,
                    position=alumni.job_title,
                    company=alumni.current_company,
                    location=alumni.city or '',
                    start_date=datetime.date.today(),
                    is_current=True,
                    career_significance='REGULAR'
                )
                print(f"Created experience from alumni data: {alumni.job_title} at {alumni.current_company}")
        
        except Exception as e:
            print(f"Error syncing position data for profile {profile.id}: {str(e)}")


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_alter_experience_options_experience_achievements_and_more'),
        ('alumni_directory', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(sync_career_paths_to_experience, migrations.RunPython.noop),
        migrations.RunPython(sync_current_positions, migrations.RunPython.noop),
    ]
