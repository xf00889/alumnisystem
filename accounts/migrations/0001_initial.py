# Generated by Django 4.2.19 on 2025-03-09 23:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('jobs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expertise_areas', models.TextField(help_text='Comma-separated areas of expertise')),
                ('availability_status', models.CharField(choices=[('AVAILABLE', 'Available for Mentorship'), ('LIMITED', 'Limited Availability'), ('UNAVAILABLE', 'Currently Unavailable')], default='AVAILABLE', max_length=20)),
                ('max_mentees', models.IntegerField(default=3, help_text='Maximum number of mentees to accept')),
                ('current_mentees', models.IntegerField(default=0)),
                ('mentoring_experience', models.TextField(blank=True, help_text='Brief description of mentoring experience')),
                ('expectations', models.TextField(blank=True, help_text='What mentees can expect from the mentorship')),
                ('preferred_contact_method', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this mentor has been verified by admins')),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('accepting_mentees', models.BooleanField(default=True, help_text='Whether the mentor is currently accepting new mentees')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_mentors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mentor',
                'verbose_name_plural': 'Mentors',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to say')], max_length=1)),
                ('current_position', models.CharField(blank=True, max_length=200)),
                ('current_employer', models.CharField(blank=True, max_length=200)),
                ('industry', models.CharField(blank=True, max_length=200)),
                ('employment_status', models.CharField(choices=[('EMPLOYED_FULL', 'Employed Full-Time'), ('EMPLOYED_PART', 'Employed Part-Time'), ('SELF_EMPLOYED', 'Self-Employed'), ('UNEMPLOYED', 'Unemployed'), ('STUDENT', 'Further Studies'), ('RETIRED', 'Retired'), ('INTERN', 'Internship/OJT')], default='UNEMPLOYED', max_length=20)),
                ('salary_range', models.CharField(blank=True, choices=[('0-15K', 'Below ₱15,000'), ('15K-30K', '₱15,000 - ₱30,000'), ('30K-50K', '₱30,000 - ₱50,000'), ('50K-80K', '₱50,000 - ₱80,000'), ('80K-100K', '₱80,000 - ₱100,000'), ('100K+', 'Above ₱100,000'), ('PREFER_NOT', 'Prefer not to say')], default='PREFER_NOT', max_length=20)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('linkedin_profile', models.URLField(blank=True, max_length=255)),
                ('facebook_profile', models.URLField(blank=True, max_length=255)),
                ('twitter_profile', models.URLField(blank=True, max_length=255)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('has_completed_registration', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='MentorApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expertise_areas', models.TextField(help_text='Comma-separated areas of expertise')),
                ('years_of_experience', models.IntegerField(help_text='Total years of professional experience')),
                ('certifications', models.FileField(help_text='PDF of relevant certifications', upload_to='mentor/certifications/')),
                ('training_documents', models.FileField(help_text='PDF of training documents', upload_to='mentor/training/')),
                ('competency_summary', models.TextField(help_text='Summary of expertise and competencies')),
                ('application_date', models.DateTimeField(auto_now_add=True)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_application', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mentor Application',
                'verbose_name_plural': 'Mentor Applications',
                'ordering': ['-application_date'],
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experience', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Experience',
                'verbose_name_plural': 'Experience',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program', models.CharField(blank=True, choices=[('BSIT', 'Bachelor of Science in Information Technology'), ('BSCS', 'Bachelor of Science in Computer Science'), ('BSIS', 'Bachelor of Science in Information Systems'), ('BSA', 'Bachelor of Science in Accountancy'), ('BSBA', 'Bachelor of Science in Business Administration'), ('BEED', 'Bachelor of Elementary Education'), ('BSED', 'Bachelor of Secondary Education'), ('BSN', 'Bachelor of Science in Nursing'), ('BSCRIM', 'Bachelor of Science in Criminology'), ('BSHRM', 'Bachelor of Science in Hotel and Restaurant Management'), ('BSTM', 'Bachelor of Science in Tourism Management'), ('BSE', 'Bachelor of Science in Engineering'), ('BSP', 'Bachelor of Science in Psychology'), ('OTHER', 'Other Program')], max_length=10, null=True)),
                ('major', models.CharField(blank=True, max_length=100)),
                ('school', models.CharField(blank=True, choices=[('NORSU-G', 'NORSU Guihulngan'), ('NORSU-BC', 'NORSU Bais City'), ('NORSU-MB', 'NORSU Mabinay'), ('NORSU-SC', 'NORSU Siaton'), ('NORSU-PC', 'NORSU Pamplona'), ('NORSU-SCC', 'NORSU Sta. Catalina'), ('NORSU-VC', 'NORSU Valencia'), ('OTHER', 'Other Campus')], max_length=10, null=True)),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('achievements', models.TextField(blank=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Education',
                'ordering': ['-graduation_year'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='documents/')),
                ('document_type', models.CharField(choices=[('TRANSCRIPT', 'Academic Transcript'), ('CERTIFICATE', 'Certificate'), ('DIPLOMA', 'Diploma'), ('RESUME', 'Resume/CV'), ('OTHER', 'Other')], max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='SkillMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_score', models.FloatField(help_text='Percentage match score (0-100)')),
                ('matched_skills', models.TextField(help_text='JSON of matched skills and their weights')),
                ('missing_skills', models.TextField(blank=True, help_text='JSON of required skills that are missing')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_notified', models.BooleanField(default=False)),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_applied', models.BooleanField(default=False)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_matches', to='jobs.jobposting')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_matches', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Skill Match',
                'verbose_name_plural': 'Skill Matches',
                'ordering': ['-match_score', '-created_at'],
                'indexes': [models.Index(fields=['match_score'], name='accounts_sk_match_s_d68ee8_idx'), models.Index(fields=['created_at'], name='accounts_sk_created_18c0cb_idx')],
                'unique_together': {('job', 'profile')},
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('skill_type', models.CharField(choices=[('TECH', 'Technical'), ('SOFT', 'Soft Skills'), ('LANG', 'Language'), ('CERT', 'Certification'), ('DOMAIN', 'Domain Knowledge'), ('TOOL', 'Tools & Software'), ('OTHER', 'Other')], max_length=10)),
                ('proficiency_level', models.IntegerField(choices=[(1, 'Beginner'), (2, 'Elementary'), (3, 'Intermediate'), (4, 'Advanced'), (5, 'Expert')])),
                ('years_of_experience', models.IntegerField(default=0, help_text='Years of experience with this skill')),
                ('last_used', models.DateField(blank=True, help_text='When was this skill last used', null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Is this a primary/key skill')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['-proficiency_level', '-years_of_experience'],
                'indexes': [models.Index(fields=['name', 'skill_type'], name='accounts_sk_name_a2ce97_idx'), models.Index(fields=['proficiency_level'], name='accounts_sk_profici_917885_idx')],
            },
        ),
        migrations.CreateModel(
            name='MentorshipRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skills_seeking', models.TextField(help_text='Skills or knowledge areas seeking mentorship in')),
                ('goals', models.TextField(help_text='What do you hope to achieve through this mentorship?')),
                ('message', models.TextField(help_text='Introduction and why you chose this mentor')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('PAUSED', 'Paused')], default='PENDING', max_length=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('expected_end_date', models.DateField(blank=True, help_text='Target date for completing the mentorship', null=True)),
                ('timeline_milestones', models.TextField(blank=True, help_text='Key milestones and timeline for the mentorship')),
                ('progress_percentage', models.IntegerField(default=0, help_text='Overall progress percentage (0-100)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feedback', models.TextField(blank=True, help_text='Feedback after mentorship completion')),
                ('rating', models.IntegerField(blank=True, help_text='Rating out of 5', null=True)),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentorship_requests', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentorship_requests', to='accounts.mentor')),
            ],
            options={
                'verbose_name': 'Mentorship Request',
                'verbose_name_plural': 'Mentorship Requests',
                'ordering': ['-created_at'],
                'unique_together': {('mentor', 'mentee', 'status')},
            },
        ),
    ]
